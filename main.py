import logging
import asyncio
import os
import db
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import RunReportRequest, DateRange, Dimension, Metric

class Form(StatesGroup): # –°–æ—Å—Ç–æ—è–Ω–∏—è
    waiting_website = State()
    waiting_website2 = State()
    waiting_website3 = State()
    waiting_website4 = State()

choicestart = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="send")],
    [InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π Property ID", callback_data="otherid")],
    [InlineKeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —Å–∞–π—Ç", callback_data="othersite")],
    [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="stats")]
]) # –ö–Ω–æ–ø–∫–∏

rassilka = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="sub")],
    [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="cancel")]
])

rassilka2 = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="unsub")],
    [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="cancel")]
])

cancel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="cancel")]
])

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.environ["TOKEN"] 

bot = Bot(token=BOT_TOKEN) # —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
dp = Dispatcher() # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
router = Router() # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ—É—Ç–µ—Ä–∞
CREDENTIALS_PATH = "credentials.json"
scheduler = AsyncIOScheduler()

def check_user_exists(user_id):
    db.cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    result = db.cursor.fetchone()
    return result is not None

def show_text(username, site, website):
    return f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {username}!\n\nüìÑ –û—Ç—á—ë—Ç –æ –≤–∞—à–µ–º –≤–µ–±-—Å–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –ª–∏–±–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\nüåê –í–∞—à Property ID: {site}\n–í–∞—à —Å–∞–π—Ç: {website}\n–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ —Å–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π Property ID –Ω–∞ –¥—Ä—É–≥–æ–π, –Ω–∞–∂–∞–≤ '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π Property ID'\n\n‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∞—à–µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –≤–∞—à–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É."

def show_text_two(username, site, website):
    return f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {username}!\n\nüìÑ –û—Ç—á—ë—Ç –æ –≤–∞—à–µ–º –≤–µ–±-—Å–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –ª–∏–±–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É\nüåê –í–∞—à Property ID: {site}\n–í–∞—à —Å–∞–π—Ç: {website}\n–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ —Å–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π Property ID –Ω–∞ –¥—Ä—É–≥–æ–π, –Ω–∞–∂–∞–≤ '‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π Property ID'\n\n‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∞—à–µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –≤–µ–±-—Å–∞–π—Ç–µ."

def get_user_data(user_id):
    cursor = db.cursor.execute("SELECT website, site FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result

def get_all_users():
    db.cursor.execute("SELECT user_id, website, site, subscribe FROM users")
    return db.cursor.fetchall()

def get_daily_analytics(credentials_path, property_id):
    try:
        client = BetaAnalyticsDataClient.from_service_account_json(credentials_path)

        # *–ò–∑–º–µ–Ω–µ–Ω–æ: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.*
        # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ property_id –∏ –º–µ—Ç—Ä–∏–∫.
        date_ranges=[DateRange(start_date="7daysAgo", end_date="yesterday")]

        # *–ò–∑–º–µ–Ω–µ–Ω–æ: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞. –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö.*
        # –ï—Å–ª–∏ –¥–∞–∂–µ —Å –Ω–∏–º–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–ª—É–±–∂–µ.
        metrics=[
            Metric(name="totalUsers"),
            Metric(name="sessions"),
            # Metric(name="screenPageViews"),  # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–Ω—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
            # Metric(name="bounceRate"),
            # Metric(name="averageSessionDuration"),
            # Metric(name="transactions"), # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–Ω—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        ]

        request = RunReportRequest(
            property=f"properties/{property_id}",
            date_ranges=date_ranges,
            dimensions=[Dimension(name="date")],
            metrics=metrics,
        )
        response = client.run_report(request)

        if response.rows:
            row = response.rows[0]
            date = row.dimension_values[0].value
            metrics_data = {} # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
            for i, metric_value in enumerate(row.metric_values):
                metric_name = response.metric_headers[i].name
                metrics_data[metric_name] = metric_value.value

            return date, metrics_data
        else:
            return None, None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Analytics: {e}")
        return None, None

async def send_daily_reports():
    users = get_all_users()
    for telegram_id, ga_property_id, website_url, subscribe in users:
        if subscribe:
            date, analytics_data = get_daily_analytics(CREDENTIALS_PATH, ga_property_id) # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            if date and analytics_data:
                report_message = (
                    f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {website_url}*\n"
                    f"–î–∞—Ç–∞: {date}\n\n"
                    f"üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {analytics_data.get('totalUsers', '–ù/–î')}\n"
                    f"üö™ –°–µ–∞–Ω—Å—ã: {analytics_data.get('sessions', '–ù/–î')}\n"
                    f"üìÉ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü: {analytics_data.get('screenPageViews', '–ù/–î')}\n"
                    f"üìâ –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–æ–≤: {analytics_data.get('bounceRate', '–ù/–î') or '0'}%\n" # –î–æ–±–∞–≤–ª–µ–Ω–æ or '0' –Ω–∞ —Å–ª—É—á–∞–π None
                    f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞: {int(float(analytics_data.get('averageSessionDuration', '0') or '0'))} —Å–µ–∫.\n" # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥—ã –∏ int
                    f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {analytics_data.get('transactions', '–ù/–î')}\n"
                    f"üíµ –í—ã—Ä—É—á–∫–∞: ${analytics_data.get('revenue', '–ù/–î')}\n"
                )
                try:
                    await bot.send_message(telegram_id, report_message, parse_mode="Markdown")
                except Exception as e: # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} (Property ID: {ga_property_id})")

@router.message(StateFilter(None), CommandStart()) # –∫–æ–º–∞–Ω–¥–∞ /start
async def send_welcome(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    if check_user_exists(user_id):
        issub = db.cursor.execute("SELECT subscribe FROM users WHERE user_id = {}".format(user_id)).fetchone()[0]
        website = db.cursor.execute("SELECT site FROM users WHERE user_id = {}".format(user_id)).fetchone()[0]
        site_cursor = db.cursor.execute("SELECT website FROM users WHERE user_id = {}".format(user_id,))
        site = site_cursor.fetchone()
        site = site[0]
        if issub == 0:
            await message.answer(show_text(username=username, site=site, website=website), reply_markup=choicestart)
        else:
            await message.answer(show_text_two(username=username, site=site, website=website), reply_markup=choicestart)
    else:
        await message.answer(f"üëãüèª –ü—Ä–∏–≤–µ—Ç, {username}!\n\n‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\nüåê –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à Google Analytics Property ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, '123456789')\n‚ùóÔ∏è –≠—Ç–æ —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –≤ Google Analytics (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã, –∞ –Ω–µ 'UA-' –∏–ª–∏ 'G-').")
        await state.set_state(Form.waiting_website)

@router.message(Form.waiting_website)
async def process_property_id(message: Message, state: FSMContext) -> None:
    property_id = message.text.strip()
    if not property_id.isdigit() and not (property_id.startswith("GA4-") and property_id[4:].isdigit()):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Property ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Property ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, `123456789` –∏–ª–∏ `GA4-123456789`).")
        return
    
    await state.update_data(id=property_id)
    await state.set_state(Form.waiting_website3)
    await message.answer(f"‚úÖ Property ID {property_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Å–∞–π—Ç.")

@router.message(Form.waiting_website3)
async def process_website(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    username = message.from_user.username
    data = await state.get_data()
    db.cursor.execute("INSERT OR IGNORE INTO users (user_id, username, website, site, subscribe) VALUES (?, ?, ?, ?, ?)", (user_id, username, data.get("id"), message.text, 1))
    db.conn.commit()
    await state.clear()
    await message.answer("‚úÖ –í–µ–± —Å–∞–π—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –≤–∞—à–µ–º —Å–∞–π—Ç–µ.")

@router.message(Form.waiting_website2)
async def process_property_id4(message: Message, state: FSMContext) -> None:
    property_id = message.text.strip()
    if not property_id.isdigit() and not (property_id.startswith("GA4-") and property_id[4:].isdigit()):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Property ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Property ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, `123456789` –∏–ª–∏ `GA4-123456789`).")
        return

    user_id = message.from_user.id
    await state.clear()
    db.cursor.execute("UPDATE users SET website = {} WHERE user_id = {}".format(property_id, user_id))
    db.conn.commit()
    await message.answer(f"‚úÖ Property ID {property_id} —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω—ë–Ω!")

@router.message(Form.waiting_website2)
async def process_website2(message: Message, state: FSMContext) -> None:
    property_id = message.text.strip()
    if not (property_id.startswith("https://") and not (property_id.startswith("http://"))):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https:// , http://).")
        return

    user_id = message.from_user.id
    await state.clear()
    db.cursor.execute("UPDATE users SET site = {} WHERE user_id = {}".format(property_id, user_id))
    db.conn.commit()
    await message.answer(f"‚úÖ –í–µ–±-—Å–∞–π—Ç {property_id} —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω—ë–Ω!")

@router.callback_query() # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±–µ–∫–æ–≤
async def process_callback(callback_query: CallbackQuery, state: FSMContext): 
    data = callback_query.data

    if data == "send":
        sub_cur = db.cursor.execute("SELECT subscribe FROM users WHERE user_id = {}".format(callback_query.from_user.id,))
        issub = sub_cur.fetchone()
        issub = issub[0]
        if issub == 1:
            await callback_query.bot.edit_message_text(
                text="üí¨ –†–∞—Å—Å—ã–ª–∫–∞\n\n‚úÖ –í—ã —Å–µ–π—á–∞—Å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n- üëå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –æ –≤–∞—à–µ–º –≤–µ–±-—Å–∞–π—Ç–µ\n- üìÑ –°–±–æ—Ä –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞\n\n‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode=None,
                reply_markup=rassilka2
            )
        elif issub == 0:
            await callback_query.bot.edit_message_text(
                text="üí¨ –†–∞—Å—Å—ã–ª–∫–∞\n\n‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n- üëå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –æ –≤–∞—à–µ–º –≤–µ–±-—Å–∞–π—Ç–µ\n- üìÑ –°–±–æ—Ä –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞\n\n‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                parse_mode=None,
                reply_markup=rassilka
            )
    
    if data == "otherid":
        await callback_query.bot.edit_message_text(
            text="‚úèÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ Property ID\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Google Analytics Property ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, '123456789')",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=None,
            reply_markup=cancel
        )
        await state.set_state(Form.waiting_website2)

    if data == "sub":
        user_id = callback_query.from_user.id
        await callback_query.bot.edit_message_text(
            text="üí¨ –†–∞—Å—Å—ã–ª–∫–∞\n\n‚úÖ –í—ã —Å–µ–π—á–∞—Å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n- üëå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –æ –≤–∞—à–µ–º –≤–µ–±-—Å–∞–π—Ç–µ\n- üìÑ –°–±–æ—Ä –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞\n\n‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=None,
            reply_markup=rassilka2
        )
        db.cursor.execute("UPDATE users SET subscribe = {} WHERE user_id = {}".format(1, user_id))
        db.conn.commit()

    if data == "unsub":
        user_id = callback_query.from_user.id
        await callback_query.bot.edit_message_text(
            text="üí¨ –†–∞—Å—Å—ã–ª–∫–∞\n\n‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:\n- üëå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –æ –≤–∞—à–µ–º –≤–µ–±-—Å–∞–π—Ç–µ\n- üìÑ –°–±–æ—Ä –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∞—à–µ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞\n\n‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=None,
            reply_markup=rassilka
        )
        db.cursor.execute("UPDATE users SET subscribe = {} WHERE user_id = {}".format(0, user_id))
        db.conn.commit()

    if data == "othersite":
        await callback_query.bot.edit_message_text(
            text="üåê –°–º–µ–Ω–∞ —Å–∞–π—Ç–∞\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–∞–π—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫ Google Analytics.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=None,
            reply_markup=cancel
        )
        await state.set_state(Form.waiting_website4)

    if data == "stats":
        user_id = callback_query.from_user.id
        user_data = get_user_data(user_id)

        ga_property_id, website_url = user_data
        date, analytics_data = get_daily_analytics(CREDENTIALS_PATH, ga_property_id) # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

        if date and analytics_data:
            report_message = (
                f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {website_url}*\n"
                f"–î–∞—Ç–∞: {date}\n\n"
                f"üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {analytics_data.get('totalUsers', '–ù/–î')}\n"
                f"üö™ –°–µ–∞–Ω—Å—ã: {analytics_data.get('sessions', '–ù/–î')}\n"
                f"üìÉ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü: {analytics_data.get('screenPageViews', '–ù/–î')}\n"
                f"üìâ –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–æ–≤: {analytics_data.get('bounceRate', '–ù/–î') or '0'}%\n" # –î–æ–±–∞–≤–ª–µ–Ω–æ or '0' –Ω–∞ —Å–ª—É—á–∞–π None
                f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞: {int(float(analytics_data.get('averageSessionDuration', '0') or '0'))} —Å–µ–∫.\n" # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥—ã –∏ int
                f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {analytics_data.get('transactions', '–ù/–î')}\n"
                f"üíµ –í—ã—Ä—É—á–∫–∞: ${analytics_data.get('revenue', '–ù/–î')}\n"
            )
            await callback_query.message.answer(report_message, parse_mode="Markdown")
        else:
            await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ credentials.")

    if data == "cancel":
        await state.clear()
        user_id = callback_query.from_user.id
        username = callback_query.from_user.username
        sub_cur = db.cursor.execute("SELECT subscribe FROM users WHERE user_id = {}".format(user_id,))
        issub = sub_cur.fetchone()
        issub = issub[0]

        await callback_query.bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)
        if check_user_exists(user_id):
            site_cur = db.cursor.execute("SELECT website FROM users WHERE user_id = {}".format(user_id,))
            site = site_cur.fetchone()
            site = site[0]
            website = db.cursor.execute("SELECT site FROM users WHERE user_id = {}".format(user_id)).fetchone()[0]
            if issub == 0:
                await callback_query.message.answer(show_text(username=username, site=site, website=website), reply_markup=choicestart)
            else:
                await callback_query.message.answer(show_text_two(username=username, site=site, website=website), reply_markup=choicestart)

async def on_startup():
    scheduler.add_job(send_daily_reports, 'cron', hour='9', minute='0')
    scheduler.start()

async def main():
    dp.startup.register(on_startup)
    dp.include_router(router) # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
    await dp.start_polling(bot) # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO) # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
    try:
        asyncio.run(main()) # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
